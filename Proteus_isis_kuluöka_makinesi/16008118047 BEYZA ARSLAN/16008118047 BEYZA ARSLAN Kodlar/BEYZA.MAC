
	NOLIST
; PICBASIC PRO(TM) Compiler 2.60, (c) 1998, 2009 microEngineering Labs, Inc. All Rights Reserved. 

LABEL?L macro Label
        RST?RP
    ifdef PM_USED
        LALL
Label
        XALL
    else
Label
    endif
    endm

ADD?WCW macro Win, Cin, Wout
    if ((Wout) == (Win))
        CHK?RP  Wout
      if ((Cin) == 1)
        incf    Wout, F
      else  
        movlw   low (Cin)
        addwf   Wout, F
      endif
        movlw   (Cin) >> 8
        addwfc  (Wout) + 1, F
    else
        CHK?RP  Win
      if ((Cin) == 1)
        incf    Win, W
      else
        movlw   low (Cin)
        addwf   Win, W
      endif
        MOVE?AB Wout
        movlw   (Cin) >> 8
        CHK?RP  Win
        addwfc  (Win) + 1, W
        MOVE?AB (Wout) + 1
    endif
    endm

DIV?WCW macro Win, Cin, Wout
    if ((Cin) == 2)
        bcf     STATUS, C
      if ((Wout) == (Win))
        CHK?RP  Wout
        rrcf    (Wout) + 1, F
        rrcf    Wout, F
      else
        CHK?RP  Win
        rrcf    (Win) + 1, W
        MOVE?AB (Wout) + 1
        CHK?RP  Win
        rrcf    Win, W
        MOVE?AB Wout
      endif
    else
        MOVE?WW Win, R0
        MOVE?CW Cin, R1
        L?CALL  DIV
        MOVE?AWW R0, Wout
    endif
    endm
DIV_USED = 1

MOD?WCW macro Win, Cin, Wout
        MOVE?WW Win, R0
        MOVE?CW Cin, R1
        L?CALL  DIV
        MOVE?WW R2, Wout
    endm
DIV_USED = 1

MUL?WCW macro Win, Cin, Wout
        MOVE?WW Win, R3
        MOVE?CW Cin, R1
        L?CALL  MUL
        MOVE?AWW R2, Wout
    endm
MUL_USED = 1

CMPEQ?BCL macro Bin, Cin, Label
    if (((Cin) > -100h) & ((Cin) < 100h))
        CLRWDT?
        MOVE?BA Bin
        sublw   Cin
        BIT?GOTO 1, STATUS, Z, Label
    endif
    endm

CMPGT?BCL macro Bin, Cin, Label
    if ((Cin) < 0)
        L?GOTO  Label
    else
      if ((Cin) < 0ffh)
        CLRWDT?
        MOVE?CA (Cin) + 1
        CHK?RP  Bin
        subwf   Bin, W
        BIT?GOTO 1, STATUS, C, Label
      endif
    endif
    endm

CLEAR? macro
    local loop
      ifdef USE_LFSR
        lfsr    0, RAM_END
      else
	MOVE?CW	RAM_END, FSR0L
      endif
loop    clrf    POSTDEC0
        movf    FSR0L, W
        iorwf   FSR0H, W
        bnz     loop
        clrf    INDF0
    endm
CLEAR_USED = 1

END? macro
    local loop
loop    sleep
        L?GOTO  loop
    endm

GOTO?L macro Label
        L?GOTO  Label
    endm

HIGH?T macro Regin, Bitin
        MOVE?CT 1, Regin, Bitin
        MOVE?CT 0, ((Regin) + 12h), Bitin
    endm

LCDOUT?C macro Cin
        movlw   Cin
        L?CALL  LCDOUT
    endm
LCDOUT_USED = 1

LCDOUTCOUNT?C macro Cin
        MOVE?CB Cin, R4 + 1
    endm

LCDOUTNUM?B macro Bin
        MOVE?BW Bin, R2
    endm

LCDOUTDEC? macro
        MOVE?CW LCDOUTJ, R8
        L?CALL  SEROUT2DEC
    endm
LCDOUTJ_USED = 1
SEROUT2DEC_USED = 1

LOW?T macro Regin, Bitin
        MOVE?CT 0, Regin, Bitin
        MOVE?CT 0, ((Regin) + 12h), Bitin
    endm

NEXT?BCL macro Bin, Cin, Label
    if ((Cin) == 1)
        CHK?RP  Bin
        incf    Bin, F
    else
        movlw	Cin
        CHK?RP  Bin
        addwf   Bin, F
    endif
    if ((Cin) <= 255)
        BIT?GOTO 0, STATUS, C, Label
    endif
    endm

OUTPUT?T macro Regin, Bitin
        MOVE?CT 0, ((Regin) + 12h), Bitin
    endm

OWPIN?T macro Regin, Bitin
        BIT?R1  Regin, Bitin
    endm

OWMODE?C macro Cin
        movlw   Cin
	L?CALL	OWRESETB
    endm
OWRESETB_USED = 1

OWIN?B macro Bout
        L?CALL  OWIN
        MOVE?AB Bout
    endm
OWIN_USED = 1

OWOUT?C macro Cin
        movlw   Cin
        L?CALL  OWOUT
    endm
OWOUT_USED = 1

OWEND? macro
	L?CALL	OWRESETA
    endm
OWRESETA_USED = 1

PAUSE?C macro Cin
    if (((Cin) >> 8) == 0)
        MOVE?CA Cin
        L?CALL  PAUSE
    else
        MOVE?CB (Cin) >> 8, R1 + 1
        MOVE?CA low (Cin)
        L?CALL  PAUSEL
    endif
    endm
PAUSE_USED = 1

RETURN? macro
    ifdef DEBUG_STACK
        CHK?RP  DEBUG_STACK
        decf    DEBUG_STACK, F
    endif
        RST?RP
        return
    endm


	LIST
